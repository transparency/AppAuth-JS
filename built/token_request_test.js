"use strict";
/*
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the
 * License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
 * express or implied. See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var token_request_1 = require("./token_request");
describe('Token Request tests', function () {
    var clientId = 'client_id';
    var clientSecret = 'client_secret';
    var redirectUri = 'http://my/redirect_uri';
    var code = 'some_code';
    var extras = { 'key': 'value' };
    var request = new token_request_1.TokenRequest({
        client_secret: clientSecret,
        client_id: clientId,
        redirect_uri: redirectUri,
        grant_type: token_request_1.GRANT_TYPE_AUTHORIZATION_CODE,
        code: code,
        refresh_token: undefined,
        extras: extras
    });
    it('Basic Token Request Tests', function () {
        expect(request).not.toBeNull();
        expect(request.clientId).toBe(clientId);
        expect(request.clientSecret).toBe(clientSecret);
        expect(request.redirectUri).toBe(redirectUri);
        expect(request.code).toBe(code);
        expect(request.grantType).toBe(token_request_1.GRANT_TYPE_AUTHORIZATION_CODE);
        expect(request.extras).toBeTruthy();
        expect(request.extras['key']).toBe('value');
        expect(request.extras).toEqual(extras);
    });
    it('To Json() and from Json() should work', function () {
        var json = JSON.parse(JSON.stringify(request.toJson()));
        expect(json).not.toBeNull();
        var newRequest = new token_request_1.TokenRequest(json);
        expect(newRequest).not.toBeNull();
        expect(newRequest.clientId).toBe(clientId);
        expect(newRequest.clientSecret).toBe(clientSecret);
        expect(newRequest.redirectUri).toBe(redirectUri);
        expect(newRequest.code).toBe(code);
        expect(newRequest.grantType).toBe(token_request_1.GRANT_TYPE_AUTHORIZATION_CODE);
        expect(newRequest.extras).toBeTruthy();
        expect(newRequest.extras['key']).toBe('value');
        expect(newRequest.extras).toEqual(extras);
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidG9rZW5fcmVxdWVzdF90ZXN0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL3Rva2VuX3JlcXVlc3RfdGVzdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7Ozs7Ozs7Ozs7OztHQVlHOztBQUVILGlEQUE0RTtBQUc1RSxRQUFRLENBQUMscUJBQXFCLEVBQUU7SUFDOUIsSUFBTSxRQUFRLEdBQUcsV0FBVyxDQUFDO0lBQzdCLElBQU0sWUFBWSxHQUFHLGVBQWUsQ0FBQztJQUNyQyxJQUFNLFdBQVcsR0FBRyx3QkFBd0IsQ0FBQztJQUM3QyxJQUFNLElBQUksR0FBRyxXQUFXLENBQUM7SUFDekIsSUFBTSxNQUFNLEdBQWMsRUFBQyxLQUFLLEVBQUUsT0FBTyxFQUFDLENBQUM7SUFFM0MsSUFBSSxPQUFPLEdBQWlCLElBQUksNEJBQVksQ0FBQztRQUMzQyxhQUFhLEVBQUUsWUFBWTtRQUMzQixTQUFTLEVBQUUsUUFBUTtRQUNuQixZQUFZLEVBQUUsV0FBVztRQUN6QixVQUFVLEVBQUUsNkNBQTZCO1FBQ3pDLElBQUksRUFBRSxJQUFJO1FBQ1YsYUFBYSxFQUFFLFNBQVM7UUFDeEIsTUFBTSxFQUFFLE1BQU07S0FDZixDQUFDLENBQUM7SUFFSCxFQUFFLENBQUMsMkJBQTJCLEVBQUU7UUFDOUIsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDLEdBQUcsQ0FBQyxRQUFRLEVBQUUsQ0FBQztRQUMvQixNQUFNLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUN4QyxNQUFNLENBQUMsT0FBTyxDQUFDLFlBQVksQ0FBQyxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQztRQUNoRCxNQUFNLENBQUMsT0FBTyxDQUFDLFdBQVcsQ0FBQyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQztRQUM5QyxNQUFNLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUNoQyxNQUFNLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUFDLElBQUksQ0FBQyw2Q0FBNkIsQ0FBQyxDQUFDO1FBQzlELE1BQU0sQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUMsVUFBVSxFQUFFLENBQUM7UUFDcEMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxNQUFPLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDN0MsTUFBTSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDekMsQ0FBQyxDQUFDLENBQUM7SUFFSCxFQUFFLENBQUMsdUNBQXVDLEVBQUU7UUFDMUMsSUFBSSxJQUFJLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFDeEQsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLEdBQUcsQ0FBQyxRQUFRLEVBQUUsQ0FBQztRQUM1QixJQUFJLFVBQVUsR0FBRyxJQUFJLDRCQUFZLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDeEMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxRQUFRLEVBQUUsQ0FBQztRQUNsQyxNQUFNLENBQUMsVUFBVSxDQUFDLFFBQVEsQ0FBQyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUMzQyxNQUFNLENBQUMsVUFBVSxDQUFDLFlBQVksQ0FBQyxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQztRQUNuRCxNQUFNLENBQUMsVUFBVSxDQUFDLFdBQVcsQ0FBQyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQztRQUNqRCxNQUFNLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUNuQyxNQUFNLENBQUMsVUFBVSxDQUFDLFNBQVMsQ0FBQyxDQUFDLElBQUksQ0FBQyw2Q0FBNkIsQ0FBQyxDQUFDO1FBQ2pFLE1BQU0sQ0FBQyxVQUFVLENBQUMsTUFBTSxDQUFDLENBQUMsVUFBVSxFQUFFLENBQUM7UUFDdkMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxNQUFPLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDaEQsTUFBTSxDQUFDLFVBQVUsQ0FBQyxNQUFNLENBQUMsQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDNUMsQ0FBQyxDQUFDLENBQUM7QUFDTCxDQUFDLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgSW5jLlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7IHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0XG4gKiBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmUgZGlzdHJpYnV0ZWQgdW5kZXIgdGhlXG4gKiBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUywgV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlclxuICogZXhwcmVzcyBvciBpbXBsaWVkLiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQge0dSQU5UX1RZUEVfQVVUSE9SSVpBVElPTl9DT0RFLCBUb2tlblJlcXVlc3R9IGZyb20gJy4vdG9rZW5fcmVxdWVzdCc7XG5pbXBvcnQge1N0cmluZ01hcH0gZnJvbSAnLi90eXBlcyc7XG5cbmRlc2NyaWJlKCdUb2tlbiBSZXF1ZXN0IHRlc3RzJywgKCkgPT4ge1xuICBjb25zdCBjbGllbnRJZCA9ICdjbGllbnRfaWQnO1xuICBjb25zdCBjbGllbnRTZWNyZXQgPSAnY2xpZW50X3NlY3JldCc7XG4gIGNvbnN0IHJlZGlyZWN0VXJpID0gJ2h0dHA6Ly9teS9yZWRpcmVjdF91cmknO1xuICBjb25zdCBjb2RlID0gJ3NvbWVfY29kZSc7XG4gIGNvbnN0IGV4dHJhczogU3RyaW5nTWFwID0geydrZXknOiAndmFsdWUnfTtcblxuICBsZXQgcmVxdWVzdDogVG9rZW5SZXF1ZXN0ID0gbmV3IFRva2VuUmVxdWVzdCh7XG4gICAgY2xpZW50X3NlY3JldDogY2xpZW50U2VjcmV0LFxuICAgIGNsaWVudF9pZDogY2xpZW50SWQsXG4gICAgcmVkaXJlY3RfdXJpOiByZWRpcmVjdFVyaSxcbiAgICBncmFudF90eXBlOiBHUkFOVF9UWVBFX0FVVEhPUklaQVRJT05fQ09ERSxcbiAgICBjb2RlOiBjb2RlLFxuICAgIHJlZnJlc2hfdG9rZW46IHVuZGVmaW5lZCxcbiAgICBleHRyYXM6IGV4dHJhc1xuICB9KTtcblxuICBpdCgnQmFzaWMgVG9rZW4gUmVxdWVzdCBUZXN0cycsICgpID0+IHtcbiAgICBleHBlY3QocmVxdWVzdCkubm90LnRvQmVOdWxsKCk7XG4gICAgZXhwZWN0KHJlcXVlc3QuY2xpZW50SWQpLnRvQmUoY2xpZW50SWQpO1xuICAgIGV4cGVjdChyZXF1ZXN0LmNsaWVudFNlY3JldCkudG9CZShjbGllbnRTZWNyZXQpO1xuICAgIGV4cGVjdChyZXF1ZXN0LnJlZGlyZWN0VXJpKS50b0JlKHJlZGlyZWN0VXJpKTtcbiAgICBleHBlY3QocmVxdWVzdC5jb2RlKS50b0JlKGNvZGUpO1xuICAgIGV4cGVjdChyZXF1ZXN0LmdyYW50VHlwZSkudG9CZShHUkFOVF9UWVBFX0FVVEhPUklaQVRJT05fQ09ERSk7XG4gICAgZXhwZWN0KHJlcXVlc3QuZXh0cmFzKS50b0JlVHJ1dGh5KCk7XG4gICAgZXhwZWN0KHJlcXVlc3QuZXh0cmFzIVsna2V5J10pLnRvQmUoJ3ZhbHVlJyk7XG4gICAgZXhwZWN0KHJlcXVlc3QuZXh0cmFzKS50b0VxdWFsKGV4dHJhcyk7XG4gIH0pO1xuXG4gIGl0KCdUbyBKc29uKCkgYW5kIGZyb20gSnNvbigpIHNob3VsZCB3b3JrJywgKCkgPT4ge1xuICAgIGxldCBqc29uID0gSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeShyZXF1ZXN0LnRvSnNvbigpKSk7XG4gICAgZXhwZWN0KGpzb24pLm5vdC50b0JlTnVsbCgpO1xuICAgIGxldCBuZXdSZXF1ZXN0ID0gbmV3IFRva2VuUmVxdWVzdChqc29uKTtcbiAgICBleHBlY3QobmV3UmVxdWVzdCkubm90LnRvQmVOdWxsKCk7XG4gICAgZXhwZWN0KG5ld1JlcXVlc3QuY2xpZW50SWQpLnRvQmUoY2xpZW50SWQpO1xuICAgIGV4cGVjdChuZXdSZXF1ZXN0LmNsaWVudFNlY3JldCkudG9CZShjbGllbnRTZWNyZXQpO1xuICAgIGV4cGVjdChuZXdSZXF1ZXN0LnJlZGlyZWN0VXJpKS50b0JlKHJlZGlyZWN0VXJpKTtcbiAgICBleHBlY3QobmV3UmVxdWVzdC5jb2RlKS50b0JlKGNvZGUpO1xuICAgIGV4cGVjdChuZXdSZXF1ZXN0LmdyYW50VHlwZSkudG9CZShHUkFOVF9UWVBFX0FVVEhPUklaQVRJT05fQ09ERSk7XG4gICAgZXhwZWN0KG5ld1JlcXVlc3QuZXh0cmFzKS50b0JlVHJ1dGh5KCk7XG4gICAgZXhwZWN0KG5ld1JlcXVlc3QuZXh0cmFzIVsna2V5J10pLnRvQmUoJ3ZhbHVlJyk7XG4gICAgZXhwZWN0KG5ld1JlcXVlc3QuZXh0cmFzKS50b0VxdWFsKGV4dHJhcyk7XG4gIH0pO1xufSk7XG4iXX0=